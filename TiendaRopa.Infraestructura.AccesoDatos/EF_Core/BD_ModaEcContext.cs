// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TiendaRopa.Infraestructura.AccesoDatos;

public partial class BD_ModaEcContext : DbContext
{
    public BD_ModaEcContext()
    {
    }

    public BD_ModaEcContext(DbContextOptions<BD_ModaEcContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Carrito> Carrito { get; set; }

    public virtual DbSet<CarritoProducto> CarritoProducto { get; set; }

    public virtual DbSet<Categoria> Categoria { get; set; }

    public virtual DbSet<ClasificacionCliente> ClasificacionCliente { get; set; }

    public virtual DbSet<Color> Color { get; set; }

    public virtual DbSet<DetallePedido> DetallePedido { get; set; }

    public virtual DbSet<Factura> Factura { get; set; }

    public virtual DbSet<HistorialNavegacion> HistorialNavegacion { get; set; }

    public virtual DbSet<Marca> Marca { get; set; }

    public virtual DbSet<MetodoPago> MetodoPago { get; set; }

    public virtual DbSet<Pedido> Pedido { get; set; }

    public virtual DbSet<PreferenciaProducto> PreferenciaProducto { get; set; }

    public virtual DbSet<Producto> Producto { get; set; }

    public virtual DbSet<ProductoDescartado> ProductoDescartado { get; set; }

    public virtual DbSet<ProductoSugerido> ProductoSugerido { get; set; }

    public virtual DbSet<Rol> Rol { get; set; }

    public virtual DbSet<Stock> Stock { get; set; }

    public virtual DbSet<Subcategoria> Subcategoria { get; set; }

    public virtual DbSet<Talla> Talla { get; set; }

    public virtual DbSet<Usuario> Usuario { get; set; }

    public virtual DbSet<UsuarioRol> UsuarioRol { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=JULIO-PERALTA;Initial Catalog=BD_ModaEc;Integrated Security=True;Encrypt=True;TrustServerCertificate=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Carrito>(entity =>
        {
            entity.HasKey(e => e.id_carrito).HasName("PK__Carrito__83A2AD9C508A8525");

            entity.ToTable(tb => tb.HasComment("Representa el carrito de compras de un cliente, creado antes de confirmar un pedido."));

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.Carrito)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Carrito__id_usua__4BAC3F29");
        });

        modelBuilder.Entity<CarritoProducto>(entity =>
        {
            entity.HasKey(e => new { e.id_carrito, e.id_producto, e.id_carritoproducto }).HasName("PK__CarritoP__4C51EC5C04B3125D");

            entity.ToTable(tb => tb.HasComment("Relaciona los productos que un cliente ha agregado a su carrito, incluyendo la cantidad."));

            entity.Property(e => e.id_carritoproducto).ValueGeneratedOnAdd();

            entity.HasOne(d => d.id_carritoNavigation).WithMany(p => p.CarritoProducto)
                .HasForeignKey(d => d.id_carrito)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CarritoPr__id_ca__59FA5E80");

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.CarritoProducto)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CarritoPr__id_pr__5AEE82B9");
        });

        modelBuilder.Entity<Categoria>(entity =>
        {
            entity.HasKey(e => e.id_categoria).HasName("PK__Categori__CD54BC5AC69A80A2");

            entity.ToTable(tb => tb.HasComment("Define las categorías generales de productos (ej: Ropa, Calzado, Accesorios)."));

            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<ClasificacionCliente>(entity =>
        {
            entity.HasKey(e => new { e.id_usuario, e.id_clasificacioncliente }).HasName("PK__Clasific__4E3E04AD719EFE26");

            entity.ToTable(tb => tb.HasComment("Define la categoría del cliente en base al monto de sus compras (Cobre, Plata u Oro), lo que influye en los descuentos aplicables."));

            entity.Property(e => e.id_clasificacioncliente).ValueGeneratedOnAdd();
            entity.Property(e => e.tipo_cliente)
                .HasMaxLength(10)
                .IsUnicode(false);

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.ClasificacionCliente)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Clasifica__id_us__7B5B524B");
        });

        modelBuilder.Entity<Color>(entity =>
        {
            entity.HasKey(e => e.id_color).HasName("PK__Color__7CF2AF03709A5E70");

            entity.ToTable(tb => tb.HasComment("Lista de colores disponibles para los productos (ej: rojo, azul, negro)."));

            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(30)
                .IsUnicode(false);
        });

        modelBuilder.Entity<DetallePedido>(entity =>
        {
            entity.HasKey(e => new { e.id_pedido, e.id_producto, e.id_detallepedido }).HasName("PK__DetalleP__A00355499881D9E1");

            entity.ToTable(tb => tb.HasComment("Registra los productos individuales que forman parte de un pedido: cantidades y precios unitarios."));

            entity.Property(e => e.id_detallepedido).ValueGeneratedOnAdd();
            entity.Property(e => e.precio_unitario).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.id_pedidoNavigation).WithMany(p => p.DetallePedido)
                .HasForeignKey(d => d.id_pedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DetallePe__id_pe__6383C8BA");

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.DetallePedido)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DetallePe__id_pr__6477ECF3");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.id_factura).HasName("PK__Factura__6C08ED534343B517");

            entity.ToTable(tb => tb.HasComment("Contiene la información de la factura generada para cada pedido, incluyendo el descuento aplicado y el total final."));

            entity.Property(e => e.descuento_aplicado).HasColumnType("decimal(5, 2)");
            entity.Property(e => e.total_final).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.id_pedidoNavigation).WithMany(p => p.Factura)
                .HasForeignKey(d => d.id_pedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Factura__id_pedi__5165187F");
        });

        modelBuilder.Entity<HistorialNavegacion>(entity =>
        {
            entity.HasKey(e => new { e.id_usuario, e.id_producto, e.id_historialnavegacion }).HasName("PK__Historia__81CD456D439CE1F9");

            entity.ToTable(tb => tb.HasComment("Registra la actividad de navegación del cliente por el catálogo (productos vistos, frecuencia, etc.)."));

            entity.Property(e => e.id_historialnavegacion).ValueGeneratedOnAdd();
            entity.Property(e => e.fecha).HasColumnType("datetime");

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.HistorialNavegacion)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Historial__id_pr__6B24EA82");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.HistorialNavegacion)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Historial__id_us__6A30C649");
        });

        modelBuilder.Entity<Marca>(entity =>
        {
            entity.HasKey(e => e.id_marca).HasName("PK__Marca__7E43E99ECB8AA6DC");

            entity.ToTable(tb => tb.HasComment("Almacena las marcas de los productos (por ejemplo: Nike, Adidas, Zara)."));

            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MetodoPago>(entity =>
        {
            entity.HasKey(e => e.id_pago).HasName("PK__MetodoPa__0941B0747CED48C2");

            entity.ToTable(tb => tb.HasComment("Contiene las diferentes formas de pago disponibles (ej: tarjeta, efectivo, PayPal)."));

            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Pedido>(entity =>
        {
            entity.HasKey(e => e.id_pedido).HasName("PK__Pedido__6FF014899119ED7F");

            entity.ToTable(tb => tb.HasComment("Almacena los pedidos realizados por los clientes, incluyendo fecha, total y método de pago."));

            entity.Property(e => e.total).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.id_pagoNavigation).WithMany(p => p.Pedido)
                .HasForeignKey(d => d.id_pago)
                .HasConstraintName("FK__Pedido__id_pago__5441852A");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.Pedido)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Pedido__id_usuar__5535A963");
        });

        modelBuilder.Entity<PreferenciaProducto>(entity =>
        {
            entity.HasKey(e => new { e.id_usuario, e.id_producto, e.id_preferenciaproducto }).HasName("PK__Preferen__81CD456D874045DF");

            entity.ToTable(tb => tb.HasComment("Almacena la calificación (de 1 a 5 estrellas) que un cliente ha dado a un producto"));

            entity.Property(e => e.id_preferenciaproducto).ValueGeneratedOnAdd();

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.PreferenciaProducto)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Preferenc__id_pr__778AC167");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.PreferenciaProducto)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Preferenc__id_us__76969D2E");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.HasKey(e => e.id_producto).HasName("PK__Producto__FF341C0D26A6BF52");

            entity.ToTable(tb => tb.HasComment("Contiene la información principal de los productos que se venden: nombre, descripción, precio, código, marca, subcategoría."));

            entity.Property(e => e.codigo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.descripcion).HasColumnType("text");
            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.precio).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.id_marcaNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.id_marca)
                .HasConstraintName("FK__Producto__id_mar__5812160E");

            entity.HasOne(d => d.id_subcategoriaNavigation).WithMany(p => p.Producto)
                .HasForeignKey(d => d.id_subcategoria)
                .HasConstraintName("FK__Producto__id_sub__59063A47");
        });

        modelBuilder.Entity<ProductoDescartado>(entity =>
        {
            entity.HasKey(e => new { e.id_usuario, e.id_producto, e.id_productodescartado }).HasName("PK__Producto__81CD456D88B5C34E");

            entity.ToTable(tb => tb.HasComment("Lista los productos que un cliente ha descartado explícitamente para no recibir sugerencias sobre ellos."));

            entity.Property(e => e.id_productodescartado).ValueGeneratedOnAdd();

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.ProductoDescartado)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductoD__id_pr__6EF57B66");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.ProductoDescartado)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductoD__id_us__6E01572D");
        });

        modelBuilder.Entity<ProductoSugerido>(entity =>
        {
            entity.HasKey(e => new { e.id_usuario, e.id_producto, e.id_productosugerido }).HasName("PK__Producto__81CD456D9EF8247A");

            entity.ToTable(tb => tb.HasComment("Guarda los productos sugeridos a un cliente, junto con la razón de dicha sugerencia (por navegación, compras anteriores, etc.)."));

            entity.Property(e => e.id_productosugerido).ValueGeneratedOnAdd();
            entity.Property(e => e.razon_sugerencia)
                .HasMaxLength(250)
                .IsUnicode(false);

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.ProductoSugerido)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductoS__id_pr__72C60C4A");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.ProductoSugerido)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ProductoS__id_us__71D1E811");
        });

        modelBuilder.Entity<Rol>(entity =>
        {
            entity.HasKey(e => e.id_rol).HasName("PK__Rol__6ABCB5E03EE21E3A");

            entity.ToTable(tb => tb.HasComment("Contiene los diferentes roles disponibles en el sistema, como “Administrador”, “Vendedor” y “Cliente”."));

            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Stock>(entity =>
        {
            entity.HasKey(e => new { e.id_producto, e.id_color, e.id_talla }).HasName("PK__Stock__E43A59BD944A4F61");

            entity.ToTable(tb => tb.HasComment("Controla la cantidad disponible de cada combinación de producto, color y talla en el inventario."));

            entity.HasOne(d => d.id_colorNavigation).WithMany(p => p.Stock)
                .HasForeignKey(d => d.id_color)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Stock__id_color__5DCAEF64");

            entity.HasOne(d => d.id_productoNavigation).WithMany(p => p.Stock)
                .HasForeignKey(d => d.id_producto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Stock__id_produc__5EBF139D");

            entity.HasOne(d => d.id_tallaNavigation).WithMany(p => p.Stock)
                .HasForeignKey(d => d.id_talla)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Stock__id_talla__5FB337D6");
        });

        modelBuilder.Entity<Subcategoria>(entity =>
        {
            entity.HasKey(e => e.id_subcategoria).HasName("PK__Subcateg__FDB38B9E95720A40");

            entity.ToTable(tb => tb.HasComment("Almacena subcategorías específicas dentro de cada categoría (ej: “Camisas” en “Ropa”)."));

            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.id_categoriaNavigation).WithMany(p => p.Subcategoria)
                .HasForeignKey(d => d.id_categoria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Subcatego__id_ca__60A75C0F");
        });

        modelBuilder.Entity<Talla>(entity =>
        {
            entity.HasKey(e => e.id_talla).HasName("PK__Talla__C16F403DAD62A569");

            entity.ToTable(tb => tb.HasComment("Define las tallas disponibles para los productos (ej: S, M, L, 36, 38)."));

            entity.Property(e => e.descripcion)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.id_usuario).HasName("PK__Usuario__4E3E04ADB20D6A7A");

            entity.ToTable(tb => tb.HasComment("Almacena los datos personales y de acceso de los usuarios del sistema (administradores, vendedores o clientes)."));

            entity.HasIndex(e => e.correo, "UQ__Usuario__2A586E0B1AD88E68").IsUnique();

            entity.Property(e => e.contraseña)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.correo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.estado)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false);
            entity.Property(e => e.nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.usuario1)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("usuario");
        });

        modelBuilder.Entity<UsuarioRol>(entity =>
        {
            entity.HasKey(e => new { e.id_usuario, e.id_rol, e.id_usuariorol }).HasName("PK__UsuarioR__5895CFF368525F3F");

            entity.ToTable(tb => tb.HasComment("Asocia usuarios con uno o más roles (relación N:N), permitiendo definir qué permisos tiene cada usuario."));

            entity.Property(e => e.id_usuariorol).ValueGeneratedOnAdd();

            entity.HasOne(d => d.id_rolNavigation).WithMany(p => p.UsuarioRol)
                .HasForeignKey(d => d.id_rol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UsuarioRo__id_ro__3E52440B");

            entity.HasOne(d => d.id_usuarioNavigation).WithMany(p => p.UsuarioRol)
                .HasForeignKey(d => d.id_usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__UsuarioRo__id_us__3D5E1FD2");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}